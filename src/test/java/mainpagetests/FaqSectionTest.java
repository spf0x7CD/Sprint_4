package mainpagetests;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import pageobject.MainPage;

import java.util.List;

import static org.junit.Assert.assertEquals;

public class FaqSectionTest {

    private ChromeOptions options;
    private WebDriver driver;
    private MainPage mainPage;
    private WebDriverWait w8;

    @Before
    public void presetting() {
        options = new ChromeOptions().addArguments("--disable-cookies"); // –ù–µ —É–≤–µ—Ä–µ–Ω —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –∏–Ω–¥—É—Å –Ω–∞ —é—Ç—É–±–µ —Å–∫–∞–∑–∞–ª —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–µ –∑–Ω–∞—é –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.
        driver = new ChromeDriver(options);
        driver.get(MainPage.url);
        mainPage = new MainPage(driver);
        w8 = new WebDriverWait(driver, 3);

    }

    @Test
    public void answersShouldOpenAfterClickAtQuestion() {
        List<WebElement> questionElements = mainPage.getFaqQuestionsList();
        int totalQuestions = questionElements.size();
        int expandedQuestionsCount = 0;

        for (WebElement question : questionElements) {
            mainPage.scrollToElement(question);
            question.click();
            // –†–µ—à–∏–ª —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –Ω–∞–¥–µ—é—Å—å —Ç–∞–∫ –º–æ–∂–Ω–æ üò∞
            try {
                w8.until(ExpectedConditions.attributeToBe(question, "aria-expanded", "true"));
                expandedQuestionsCount += 1;
            } catch (TimeoutException e) {
                System.out.printf("–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å \"%s\" –Ω–µ —Ä–∞—Å–∫—Ä—ã–ª—Å—è.\n", question.getText());
                continue;
            }
            System.out.printf("–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å \"%s\" —Ä–∞—Å–∫—Ä—ã–ª—Å—è.\n", question.getText());
        }
        assertEquals(String.format("%d –≤–æ–ø—Ä–æ—Å(-–∞, -–æ–≤) –Ω–µ –±—ã–ª–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã.", totalQuestions - expandedQuestionsCount), totalQuestions, expandedQuestionsCount);
    }

    @After
    public void tearDown() {
        driver.quit();
    }
}
